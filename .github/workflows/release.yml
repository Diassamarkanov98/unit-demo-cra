name: Release process
on:
  push:
    tags:
      - "v*"
jobs:
  issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    outputs:
      issue_number: ${{ steps.create_issue.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install auto-changelog
        run: npm i -g auto-changelog
        
      - name: Generate changelog
        run: auto-changelog --commit-limit false --template keepachangelog

      - name: Create Issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const description = fs.readFileSync('CHANGELOG.md', 'utf8');
            const [owner, repo] = '${{ github.repository }}'.split('/');
            const version = '${{ github.ref_name }}';
            const title = `Release ${version} by ${{ github.actor }}`;
            const issue = { owner, repo, labels: ['RELEASE'] };
            const issues = await github.rest.issues.listForRepo({ ...issue, state: 'all' });
            const existingIssue = issues.data.find(i => i.title === title);

            if (existingIssue) {
              const update = { ...issue, issue_number: existingIssue.number, body: description, state: 'open' };
              await github.rest.issues.update(update);
              return existingIssue.number;
            } else {
              const create = { ...issue, title: title, body: description };
              const response = await github.rest.issues.create(create);
              return response.data.number;
            }

  release-branch:
    runs-on: ubuntu-latest

    permissions: write-all

    needs: issue

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Initialize git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Git checkout
        run: |
          git checkout -b release-${{ github.ref_name }}

      - name: Push the branch
        run: git push origin release-${{ github.ref_name }}  

  unit-tests:
    runs-on: ubuntu-latest
    needs: issue
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install dependencies
        run: npm ci
  
      - name: Run unit-tests
        run: npm run test-ci

        if: always()
      - uses: actions/upload-artifact@v3
        with:
          name: junit
          path: junit.xml
          retention-days: 30 
  e2e-tests:
    runs-on: ubuntu-latest
    needs: issue
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci 

      - name: Install playwright
        run: npx playwright install --with-deps
      
      - name: Create 'playwright-report' directory
        run: |
          mkdir playwright-report
          
      - name: Run e2e tests
        run: npm run e2e-ci

        if: always()
      - uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30  


  code-lint:
    runs-on: ubuntu-latest
    needs: issue
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
  
      - name: Code-lint check
        run: npm run test

  commit-lint:
    runs-on: ubuntu-latest
    needs: issue
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
    
      - name: Commitlint check
        run: npx commitlint --from HEAD~1 --to HEAD --verbose

  deploy: 
    needs: [commit-lint, code-lint, e2e-tests, unit-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

        if: success()

      - name: Deploy to Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: gh-pages
          allow_empty_commit: true
          commit_message: 'Deploy to GitHub Pages'

      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/
          retention-days: 30
          
      - name: Get GitHub Pages URL
        id: get-pages-url
        run: |
          echo "https://$GITHUB_REPOSITORY_OWNER.github.io/$GITHUB_REPOSITORY/"
          echo "::set-output name=url::https://$GITHUB_REPOSITORY_OWNER.github.io/$GITHUB_REPOSITORY/"
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
    
      - name: Update Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const description = fs.readFileSync('CHANGELOG.md', 'utf8');
            const [owner, repo] = '${{ github.repository }}'.split('/');
            const version = '${{ github.ref_name }}';
            const title = `Release ${version} by ${{ github.actor }}`;
            const issue = { owner, repo, labels: ['RELEASE'] };
            const issues = await github.rest.issues.listForRepo({ ...issue, state: 'all' });
            const existingIssue = issues.data.find(i => i.title === title);
  
            if (existingIssue) {
              const update = { ...issue, issue_number: existingIssue.number, body: description, state: 'open' };
              await github.rest.issues.update(update);
              return existingIssue.number;
            } else {
              const create = { ...issue, title: title, body: description };
              const response = await github.rest.issues.create(create);
              return response.data.number;
            }
  
            // Add GitHub Pages URL to the issue if it exists
            if (process.env.GH_PAGES_URL) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: existingIssue.number,
                body: `GitHub Pages URL: ${process.env.GH_PAGES_URL}`
              });
            }
    